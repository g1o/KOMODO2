"kendall",
KOMODO2$denominator)
KOMODO2$correlations.kendall <- tmp$cor
KOMODO2$mode <- lapply(KOMODO2$y, getmode)
KOMODO2$correlations.pvalue.kendall <- tmp$cor.pvalue
print("Done")
#  KOMODO2$correlations.spearman <- FindCorrelations(KOMODO2$x, KOMODO2$y,
#                                                    "spearman",
#                                                    KOMODO2$denominator)
#  KOMODO2$correlations.kendall <- FindCorrelations(KOMODO2$x, KOMODO2$y,
#                                                   "kendall",
#                                                   KOMODO2$denominator)
KOMODO2$annotation.cor <- AnnotateResults(KOMODO2$correlations.pearson,
KOMODO2$ontology)
print("Printing flat file results (correlations)")
PrintCResults(KOMODO2$correlations.pearson, KOMODO2$annotation.cor,
"p_corr_results.tsv", KOMODO2$ontology)
PrintCResults(KOMODO2$correlations.spearman, KOMODO2$annotation.cor,
"s_corr_results.tsv", KOMODO2$ontology)
PrintCResults(KOMODO2$correlations.kendall, KOMODO2$annotation.cor,
"k_corr_results.tsv", KOMODO2$ontology)
KOMODO2$results.correlations.pvalue.pearson <- MultipleHypothesisCorrection(KOMODO2$correlations.pvalue.pearson)
KOMODO2$results.correlations.pvalue.spearman <- MultipleHypothesisCorrection(KOMODO2$correlations.pvalue.spearman)
KOMODO2$results.correlations.pvalue.kendall <- MultipleHypothesisCorrection(KOMODO2$correlations.pvalue.kendall)
KOMODO2$contrasts.corrected <- MultipleHypothesisCorrection(KOMODO2$contrasts)
print("Printing flat file results (phylogeny-aware linear models)")
KOMODO2$contrasts.cor <- AnnotateResults(KOMODO2$contrasts,
KOMODO2$ontology)
KOMODO2$sum.cor <- AnnotateResults(KOMODO2$sum, KOMODO2$ontology)
KOMODO2$cv.cor <- AnnotateResults(KOMODO2$cv, KOMODO2$ontology)
KOMODO2$sd.cor <- AnnotateResults(KOMODO2$sd, KOMODO2$ontology)
PrintCResults(KOMODO2$contrasts.corrected, KOMODO2$contrasts.cor,
"contrasts_corrected.tsv", "q_value")
PrintCResults(KOMODO2$contrasts, KOMODO2$contrasts.cor,
"contrasts_raw.tsv", "correlation")
print("Printing flat file results (q-values for association tests)")
PrintCResults(KOMODO2$results.correlations.pvalue.pearson, KOMODO2$annotation.cor,
"p_corr_qvalues_results.tsv", "q_value")
PrintCResults(KOMODO2$results.correlations.pvalue.spearman, KOMODO2$annotation.cor,
"s_corr_qvalues_corr_results.tsv", "q_value")
PrintCResults(KOMODO2$results.correlations.pvalue.kendall, KOMODO2$annotation.cor,
"k_corr_qvalues_corr_results.tsv", "q_value")
print("Printing flat file results (basic statistics)")
PrintCResults(KOMODO2$sum, KOMODO2$sum.cor,
"sum.tsv", "sum")
PrintCResults(KOMODO2$sd, KOMODO2$sd.cor,
"sd.tsv", "sd")
PrintCResults(KOMODO2$cv, KOMODO2$cv.cor,
"cv.tsv", "cv")
#  if (exists(KOMODO2$linear_model_cutoff)) { #defining what results will be available in html5 output (only annotations with phylogeny-aware smaller than cutoff will be printed)
cutoff=KOMODO2$linear_model_cutoff
#  } else {
#    cutoff = 0.5
#  }
text <- paste0("Printing html5 output file for results with phylogeny-aware q-values < ", cutoff)
print(text)
sumY<-sapply(KOMODO2$y,sum) # done as vector, it is a simply sum and it is fast as this, must check how the list type is used before this one.
sumY<-sumY[!sumY==0] # filter out those with no observations
Y<-KOMODO2$y[,colSums(KOMODO2$y)!=0]
KOMODO2$sd <- KOMODO2$sd[colSums(KOMODO2$y)!=0]
KOMODO2$cv <- KOMODO2$cv[colSums(KOMODO2$y)!=0]
plotframe<-rbind(KOMODO2$contrasts.corrected[order(names(KOMODO2$contrasts.corrected))],
KOMODO2$results.correlations.pvalue.pearson[order(names(KOMODO2$results.correlations.pvalue.pearson))],
KOMODO2$results.correlations.pvalue.spearman[order(names(KOMODO2$results.correlations.pvalue.spearman))],
KOMODO2$results.correlations.pvalue.kendall[order(names(KOMODO2$results.correlations.pvalue.kendall))],
KOMODO2$correlations.pearson[order(names(KOMODO2$correlations.pearson))],
KOMODO2$correlations.spearman[order(names(KOMODO2$correlations.spearman))],
KOMODO2$correlations.kendall[order(names(KOMODO2$correlations.kendall))],
sumY[order(names(sumY))],
KOMODO2$sd[order(names(KOMODO2$sd))],
KOMODO2$cv[order(names(KOMODO2$cv))],
KOMODO2$greaterthanzero[order(names(KOMODO2$greaterthanzero))],
KOMODO2$heterogeneity[order(names(KOMODO2$heterogeneity))],
Y[,order(colnames(Y))])
rownames(plotframe)[1:12]<-c("corrected_contrasts",
"Pearson_qvalue",
"Spearman_qvalue",
"Kendall_qvalue",
"Pearson_cor",
"Spearman_cor",
"Kendall_cor",
"size",
"sd",
"cv",
"distribution",
"heterogeneity")
plotframe<-as.data.frame(t(plotframe))
description<-unlist(KOMODO2$annotation.cor)
description<-description[order(names(description))]
plotframe$description<-description
plotframe$name<-rownames(plotframe)
df_cutoff<-plotframe[plotframe$corrected_contrasts<cutoff,]
df_cutoff<-df_cutoff[df_cutoff$sd!=0,] #removing trivial cases, constant values.
wd<-normalizePath(KOMODO2$output.dir);
render("KOMODO2_correlation_report.Rmd",output_file=paste0(wd,'/KOMODO2_report.html') )
print("Done")
} else if (KOMODO2$type == "significance") {
if (tolower(KOMODO2$ontology) == "go" |
tolower(KOMODO2$ontology) == "gene ontology") {
KOMODO2$allAncestor <- ListAncestors()
KOMODO2$allObsolete <- ListObsoletes()
KOMODO2$allSynonym <- ListSynonyms()
} else if (tolower(KOMODO2$ontology) == "kegg") {
KOMODO2$allKOs <- ListKOs()
} else if (tolower(KOMODO2$ontology) == "other" & KOMODO2$dict.path == "") {
KOMODO2$dictionary <- CreateDictionary(KOMODO2$test.anno,
KOMODO2$back.anno)
}
KOMODO2$testGV <- AddGenomeVectors(KOMODO2$test.anno, KOMODO2$test.name)
KOMODO2$backGV <- AddGenomeVectors(KOMODO2$back.anno, KOMODO2$back.name)
# Preparing a listing of parameter vectors
if (is.null(KOMODO2$testElementCount)) {
KOMODO2$testElementCount <- GroupElementCount(KOMODO2$test.anno,
KOMODO2$test.name)
}
if (is.null(KOMODO2$backElementCount)) {
KOMODO2$backElementCount <- GroupElementCount(KOMODO2$back.anno,
KOMODO2$back.name)
}
KOMODO2$parameterVectors <- ParameterVectors(KOMODO2$testGV, KOMODO2$backGV,
KOMODO2$testElementCount,
KOMODO2$backElementCount)
# Statistical test
KOMODO2$pvalue.f.over <- StatisticalTest(KOMODO2$parameterVectors,
"fisher.over")
KOMODO2$pvalue.f.under <- StatisticalTest(KOMODO2$parameterVectors,
"fisher.under")
KOMODO2$pvalue.ks.over <- CompareDistributions(KOMODO2$parameterVectors,
KOMODO2$testGV,
KOMODO2$backGV)
KOMODO2$pvalue.ks.under <- CompareDistributions(KOMODO2$parameterVectors,
KOMODO2$testGV,
KOMODO2$backGV, "ks.under")
KOMODO2$pvalue.w.over <- CompareDistributions(KOMODO2$parameterVectors,
KOMODO2$testGV, KOMODO2$backGV,
"wilcox.over")
KOMODO2$pvalue.w.under <- CompareDistributions(KOMODO2$parameterVectors,
KOMODO2$testGV, KOMODO2$backGV,
"wilcox.under")
# Multiple Hypothesis Correction
KOMODO2$results.f.over <- MultipleHypothesisCorrection(KOMODO2$pvalue.f.over)
KOMODO2$results.f.under <- MultipleHypothesisCorrection(
KOMODO2$pvalue.f.under)
KOMODO2$results.ks.over <- MultipleHypothesisCorrection(
KOMODO2$pvalue.ks.over)
KOMODO2$results.ks.under <- MultipleHypothesisCorrection(
KOMODO2$pvalue.ks.under)
KOMODO2$results.w.over <- MultipleHypothesisCorrection(
KOMODO2$pvalue.w.over)
KOMODO2$results.w.under <- MultipleHypothesisCorrection(
KOMODO2$pvalue.w.under)
# Effect size (Phi Coefficient)
KOMODO2$phi <- GetPhiCoefficient(KOMODO2$parameterVectors)
KOMODO2$r <- Get.r.Coefficient(KOMODO2$testGV, KOMODO2$backGV,
KOMODO2$pvalue.ks.over)
# Confidence Intervals
#   KOMODO2$confInt.phi <- ConfidenceInterval(KOMODO2$phi, 1.96, "P",
#                                             KOMODO2$parameterVectors)
KOMODO2$confInt.r <- ConfidenceInterval(KOMODO2$r, 1.96, "N",
KOMODO2$test.name,
KOMODO2$back.name)
# Fold change
KOMODO2$foldChange.p <- CalculateFoldChange(KOMODO2$parameterVectors)
KOMODO2$foldChange.n <- CalculateFoldChange(KOMODO2$parameterVectors, "N",
KOMODO2$test.name,
KOMODO2$back.name)
# Annotating results
KOMODO2$annotation <- AnnotateResults(KOMODO2$results.f.over,
KOMODO2$ontology)
# Bootstrap analysis
if (KOMODO2$bootstrap > 1) {
KOMODO2$bootIndices <- BootGenomeVectorsIndices(KOMODO2$testGV,
KOMODO2$backGV,
KOMODO2$bootstrap)
KOMODO2$bParameterVectors <- BootParameterVectors(KOMODO2$testGV,
KOMODO2$backGV,
KOMODO2$testElementCount,
KOMODO2$backElementCount,
KOMODO2$bootIndices)
KOMODO2$count.f.over <- BootStatisticalTest(KOMODO2$bParameterVectors,
"fisher.over")
KOMODO2$count.f.under <- BootStatisticalTest(KOMODO2$bParameterVectors,
"fisher.under")
KOMODO2$count.ks.over <- BootDistributions(KOMODO2$bParameterVectors,
KOMODO2$bootIndices,
KOMODO2$testGV, KOMODO2$backGV)
KOMODO2$count.ks.under <- BootDistributions(KOMODO2$bParameterVectors,
KOMODO2$bootIndices,
KOMODO2$testGV, KOMODO2$backGV,
"ks.under")
KOMODO2$count.w.over <- BootDistributions(KOMODO2$bParameterVectors,
KOMODO2$bootIndices,
KOMODO2$testGV, KOMODO2$backGV,
"wilcox.over")
KOMODO2$count.w.under <- BootDistributions(KOMODO2$bParameterVectors,
KOMODO2$bootIndices,
KOMODO2$testGV, KOMODO2$backGV,
"wilcox.under")
KOMODO2$hCount.f.over <- Boot_MHCorrection(KOMODO2$count.f.over)
KOMODO2$hCount.f.under <- Boot_MHCorrection(KOMODO2$count.f.under)
KOMODO2$hCount.ks.over <- Boot_MHCorrection(KOMODO2$count.ks.over)
KOMODO2$hCount.ks.under <- Boot_MHCorrection(KOMODO2$count.ks.under)
KOMODO2$hCount.w.over <- Boot_MHCorrection(KOMODO2$count.w.over)
KOMODO2$hCount.w.under <- Boot_MHCorrection(KOMODO2$count.w.under)
KOMODO2$count.f.over <- SignificantSamples(KOMODO2$hCount.f.over,
KOMODO2$parameterVectors,
KOMODO2$criticalValue)
KOMODO2$count.f.under <- SignificantSamples(KOMODO2$hCount.f.under,
KOMODO2$parameterVectors,
KOMODO2$criticalValue)
KOMODO2$count.ks.over <- SignificantSamples(KOMODO2$hCount.ks.over,
KOMODO2$parameterVectors,
KOMODO2$criticalValue)
KOMODO2$count.ks.under <- SignificantSamples(KOMODO2$hCount.ks.under,
KOMODO2$parameterVectors,
KOMODO2$criticalValue)
KOMODO2$count.w.over <- SignificantSamples(KOMODO2$hCount.w.over,
KOMODO2$parameterVectors,
KOMODO2$criticalValue)
KOMODO2$count.w.under <- SignificantSamples(KOMODO2$hCount.w.under,
KOMODO2$parameterVectors,
KOMODO2$criticalValue)
}
# Printing results into a file
PrintResults(KOMODO2, "f.over", "fisher_over")
PrintResults(KOMODO2, "f.under", "fisher_under")
PrintNPResults(KOMODO2, "ks.over", "ks_over")
PrintNPResults(KOMODO2, "ks.under", "ks_under")
PrintNPResults(KOMODO2, "w.over", "wilcox_over")
PrintNPResults(KOMODO2, "w.under", "wilcox_under")
PrintVolcanoPlot(KOMODO2$foldChange.p, KOMODO2$results.f.over,
outputName = "volcano_fover.png")
PrintVolcanoPlot(KOMODO2$foldChange.p, KOMODO2$results.f.under,
outputName = "volcano_funder.png")
PrintVolcanoPlot(KOMODO2$foldChange.n, KOMODO2$results.ks.over,
outputName = "volcano_ksover.png")
PrintVolcanoPlot(KOMODO2$foldChange.n, KOMODO2$results.ks.under,
outputName = "volcano_ksunder.png")
PrintVolcanoPlot(KOMODO2$foldChange.n, KOMODO2$results.w.over,
outputName = "volcano_wover.png")
PrintVolcanoPlot(KOMODO2$foldChange.n, KOMODO2$results.w.under,
outputName = "volcano_wunder.png")
PrintSignificantHist(KOMODO2$results.f.over, 0.05, KOMODO2$testGV,
KOMODO2$backGV, KOMODO2$annotation)
PrintSignTermCor(KOMODO2$ontology, KOMODO2$results.f.over,
KOMODO2$annotation, "pearson", KOMODO2$testGV,
KOMODO2$backGV, 0.05)
# Printing the heatmap with the hierarchical clustering
HierarchicalClustering(KOMODO2, test = "f.over",
outputName = "heatmap_fover.png",
criticalValue = 0.05, margins = c(50,30),
nResults = 25)
HierarchicalClustering(KOMODO2, test = "f.under",
outputName = "heatmap_funder.png",
criticalValue = 0.05, margins = c(50,30),
nResults = 25)
HierarchicalClustering(KOMODO2, test = "ks.over",
outputName = "heatmap_ksover.png",
criticalValue = 0.05, margins = c(50,30),
nResults = 25)
HierarchicalClustering(KOMODO2, test = "ks.under",
outputName = "heatmap_ksunder.png",
criticalValue = 0.05, margins = c(50,30),
nResults = 25)
HierarchicalClustering(KOMODO2, test = "w.over",
outputName = "heatmap_wover.png",
criticalValue = 0.05, margins = c(50,30),
nResults = 25)
HierarchicalClustering(KOMODO2, test = "w.under",
outputName = "heatmap_wunder.png",
criticalValue = 0.05, margins = c(50,30),
nResults = 25)
}
# Close parallel structure
if (!is.null(KOMODO2$cores)) {
if (KOMODO2$cores > 1) {
stopCluster(KOMODO2$cl)
}
}
warnings()
KOMODO2$y[1]
KOMODO2$y[1,]
KOMODO2$y[2,]
KOMODO2$y[,1]
KOMODO2$y[,2]
KOMODO2$denominator
KOMODO2$y[,2]/KOMODO2$denominator
names(KOMODO2$y)
rownames(KOMODO2$y)
names(KOMODO2$denominator)
dim(y)
dim(KOMODO2$y)
?dim
x <- 1:12
dim(x) <- c(3,4)
x
y <- KOMODO2$y
y
y[1]
y[2]
y[2]/KOMODO2$denominator
tmp <- y[2]/KOMODO2$denominator
tmp2 <- KOMODO2$y/KOMODO2$denominator
tmp
tmp[1]
tmp
tmp[1]
tmp2[1]
tmp
tmp2[1]
dim(t(y))
t(y)/KOMODO2$denominator
tmp2 <- t(y)/KOMODO2$denominator
tmp
tmp2[1]
tmp2[1,]
tmp2[1,]
tmp
tmp2[1,]
tmp2[,1]
tmp2[1,]
tmp
dim(KOMODO2$y)
x
dim(x)
dim(t(KOMODO2$y))
mapply(`/`, data.frame(KOMODO2$y), KOMODO2$denominator)
?sweeep
?sweep
a <- matrix(1:9, byrow = TRUE,  nrow = 3)
b <- c(3:5)
a
b
a <- matrix(1:15, byrow = TRUE,  nrow = 3)
b <- c(3:5)
a
b
sweep(a, 2, b, FUN = '/')
mapply(`/`, data.frame(a), b)
mapply(`/`, t(data.frame(a)), b)
mapply(`/`, t((a)), b)
mapply(`/`, t(a), b)
mapply(`/`, a, b)
lapply(`/`, a, b)
apply(`/`, a, b)
t(t(a)/b)
a
b
t((a)/b)
a
t(t(a)/b)
b
t(a/t(b))
t(b)
b
t(a)
t(a)[1]
t(a)[1,]
t(a)[1,]/b
t(a)[1,]
b
t(t(a)/b)
sweep(KOMODO2$y,MARGIN=2,FUN="/",STATS=KOMODO2$denominator)
la <- sweep(KOMODO2$y,MARGIN=2,FUN="/",STATS=KOMODO2$denominator)
dim(la)
la[1]
KOMODO2$y[1]
KOMODO2$y[1]/KOMODO2$denominator
la2 <- KOMODO2$y[1]/KOMODO2$denominator
la[1]
la2[1]
la[1]
(t(t(KOMODO2$y)/KOMODO2$denominator)))
t(t(KOMODO2$y)/KOMODO2$denominator)))
t(t(KOMODO2$y)/KOMODO2$denominator)
la <- t(t(KOMODO2$y)/KOMODO2$denominator)
la[1]
la[1,]
la[,1]
la2 <- KOMODO2$y[1]/KOMODO2$denominator
la2
la[,1]
KOMODO2$denominator
KOMODO2$y[1]
KOMODO2$denominator
la[,1]
la2
la <- t((KOMODO2$y)/KOMODO2$denominator)
la[1]
la[,1]
la[1,]
la[2,]
dim(KOMODO2$y)
x
dim(x)
KOMODO2$y[1,]
KOMODO2$y[,1]
dim(KOMODO2$y)
KOMODO2$y[,2]
KOMODO2$y[,10000]
KOMODO2$y[,1000]
t(KOMODO2$y / KOMODO2$denominator)
tmp <- (KOMODO2$y / KOMODO2$denominator)
tmp[1]
tmp[2]
tmp[3]
tmp[1]
KOMODO2$y[1,]
KOMODO2$y[,1]
KOMODO2$denominator
tmp[1]
y <- KOMODO2$y
denominator <- KOMODO2$denominator
tmp <- t(y/denominator)
dim(tmp)
tmp[1,]
tmp[420,]
y[,420]
y[,420]/denominator
ncol(y)
rm(list=ls())
source("parameters_gene2GO_Pan_proxy.R")
source("load.R")
source("clean.R")
source("do.R")
y <- KOMODO2$y
tmp_x <- as.vector(as.numeric(KOMODO2$x[,1]))
names(tmp_x) <- rownames(KOMODO2$x)
contrast_x <- pic(tmp_x, tree)
tree <- KOMODO2$tree
tmp_x <- as.vector(as.numeric(KOMODO2$x[,1]))
names(tmp_x) <- rownames(KOMODO2$x)
contrast_x <- pic(tmp_x, tree)
tmp_x
contrast_x
models <- vector(mode="numeric", length=ncol(y))
names(models) <- colnames(y)
denominator <- KOMODO2$denominator
if (!is.null(denominator)) {
#    y <- as.data.frame(t(t(y) / denominator))
y <- t(y / denominator)
}
dim(y)
if (!is.null(denominator)) {
#    y <- as.data.frame(t(t(y) / denominator))
y <- (y / denominator)
}
dim(y)
y[1]
y[,1]
y[1,]
dim(y)
if (!is.null(denominator)) {
#    y <- as.data.frame(t(t(y) / denominator))
y <- t(y / denominator)
}
dim(y)
for (i in 1:ncol(y)) {
tmp_y <- as.vector(as.numeric(y[, i]))
names(tmp_y) <- rownames(x)
contrast_y <- pic(tmp_y, tree)
model <- lm(contrast_y ~ contrast_x + 0)
models[[i]] <- summary(model)$coefficients[1,4]
}
x <- KOMODO2$x
for (i in 1:ncol(y)) {
tmp_y <- as.vector(as.numeric(y[, i]))
names(tmp_y) <- rownames(x)
contrast_y <- pic(tmp_y, tree)
model <- lm(contrast_y ~ contrast_x + 0)
models[[i]] <- summary(model)$coefficients[1,4]
}
models
models["GO:0002345"]
models["GO:0022610"]
tmp <- FindContrasts(KOMODO2$x, KOMODO2$y,
KOMODO2$tree, "pic",
KOMODO2$denominator)
print("Done");
KOMODO2$contrasts <- tmp
rm(list=ls())
source("parameters_gene2GO_Pan_proxy.R")
source("load.R")
source("clean.R")
source("do.R")
rm(list=ls())
source("parameters_gene2GO_Pan_proxy.R")
source("load.R")
source("clean.R")
source("do.R")
rm(list=ls())
source("parameters_Pfam_Pan_proxy.R")
source("load.R")
source('clean.R')
source("do.R")
KOMODO2$y
KOMODO2$y[1]
KOMODO2$denominator
KOMODO2$y[1]/KOMODO2$denominator
y <- KOMODO2$y
y <- y/KOMODO2$denominator
y[1]
y[1]
identical((KOMODO2$y[1]/KOMODO2$denominator), y[1])
identical((KOMODO2$y[2]/KOMODO2$denominator), y[2])
KOMODO2$y[2]
rm(list=ls())
source("parameters_gene2GO_Pan_proxy.R")
source("load.R")
source("clean.R")
source("do.R")
warnings()
